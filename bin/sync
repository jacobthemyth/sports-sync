#!/usr/bin/env node
var request = require('request');
var _ = require('underscore');
var uuid = require('node-uuid');

var Firebase = require('firebase');
var ref = new Firebase('http://sportsproject.firebaseio.com');
var testref = new Firebase('http://sportsproject.firebaseio.com/test');
var gamesref = new Firebase('http://sportsproject.firebaseio.com/games');

var allGamesURL = 'https://www.kimonolabs.com/api/aubt5o1k?apikey=kImHEUcaMlxMzi9OunQSth2GLHvtWyCl';
var specificURL = "https://www.kimonolabs.com/api/34hkhdqk?apikey=kImHEUcaMlxMzi9OunQSth2GLHvtWyCl";

var gameList = [];
var firebaseQueue = [];

//We need one function that is capable of finding NEW games
//  - Pulls in games from the first API
//  - Pulls in collection of games from firebase
//  - Compares the custom ID of each to determine whether it exists in the databse
//    - If it isn't already in the database, push() to it making a child node for that game
//    - If so, don't push() to the games section but update the isLive property
//      - This is done by looking at the first quarter time and if it exists, making isLive:false
//      - If the first quarter score exists, isLive:true
//      - If (timeLeft==='FINAL') {isLive:false}

function manageNewGames() {

  allGamesList = [];
  console.log('Sending request to get a list of all of the games...');

  //This is where we get the list of all of the games from Yahoo's
  //scoreboard page.

  request(allGamesURL, function (error, response, body) {
    if(!error && response.statusCode == 200) {
      // console.log(body);
      allgames = JSON.parse(body);
      allGamesList = allgames.results.collection1;
      console.log('Retrieving games stored on firebase...');

        // We have access to both allGamesList(yahoo) and storedGames(firebase)
        //Comparing the allGamesList(yahoo) to the storedGames(firebase)



        function updateNewGames(game) {
          var Id = game.visitor + game.home;
          var id = Id.replace('.','');
          gamesref.orderByChild('Id').equalTo(id).on('value', function (snapshot) {
            if (snapshot.val()) {
              console.log("Match Found! Updating isLive property now.")
              //update the isLive property;
            } else {
              // console.log('id: ' + id);
              // console.log('snapshot: ' + snapshot.val());
              firebaseQueue.push(game);
              console.log('This game does not exist yet. Added to queue.');
            }

            if(allGamesList.length > 0) {
              g = allGamesList.shift();
              updateNewGames(g);
            } else {


              if (firebaseQueue.length > 0 ) {
                console.log("The Firebase queue has " + firebaseQueue.length + " items to add to the collection");
                var i = firebaseQueue.shift();
                putInFirebase(i);
              } else {
              // waits 5 minutes before checking again(subject to change)
                console.log("No more items to add to Firebase. Waiting five minutes to retry...")
                setTimeout(function () {
                  manageNewGames();
                },300000);
              }


            }
          });
        };

      var g = allGamesList.shift();
      updateNewGames(g);

    } else {
      console.log('Error: ', error);
    };
  })
}

function putInFirebase(game) {
  var url = game.href.href;
  var splitUrl = "http://sports.yahoo.com/ncaaf/";
  var splitArray = url.split(splitUrl);
  var endPoint = (splitArray[1]);
  var parameter = "&kimpath2=" + endPoint;
  var gameUrl = specificURL + parameter;
  console.log('Sending request for: ' + gameUrl);
  request(gameUrl, function(error, response, body) {
    if (!error && response.statusCode == 200) {
      var parsedBody = JSON.parse(body);
      var results = parsedBody.results.collection1;
      var teamOne = results[0];
      var teamTwo = results[1];
      var Id = teamOne.teamName.text + teamTwo.teamName.text;
      var id = Id.replace('.','');


      var thisgame = {
        Id:id,
        timeLeft:teamOne.timeLeft,
        url:gameUrl,

        teamOne: {
          id:uuid.v1(),
          teamName:teamOne.teamName.text,
          rank: teamOne.rank,
          quarterOneScore: teamOne.quarterOneScore,
          quarterTwoScore: teamOne.quarterTwoScore,
          quarterThreeScore: teamOne.quarterThreeScore,
          quarterFourScore: teamOne.quarterFourScore,
          totalScore: teamOne.totalScore,
          logo: teamOne.logo.src,
        },

        teamTwo: {
          id:uuid.v1(),
          teamName:teamTwo.teamName.text,
          rank: teamTwo.rank,
          quarterOneScore: teamTwo.quarterOneScore,
          quarterTwoScore: teamTwo.quarterTwoScore,
          quarterThreeScore: teamTwo.quarterThreeScore,
          quarterFourScore: teamTwo.quarterFourScore,
          totalScore: teamTwo.totalScore,
          logo: teamTwo.logo.src,
        }
      };

      gamesref.push(thisgame);
      console.log("Pushed " + thisgame.id +  " to games collection");

      if (firebaseQueue.length > 0) {
        var next = firebaseQueue.shift();
        setTimeout(function () {
          putInFirebase(next)
        },15000)
        console.log(next.visitor + ' vs. ' + next.home + ' next in the queue');
      } else {
        manageNewGames();
      }

    } else {
      console.log(response);
    }
  })
};


manageNewGames();
